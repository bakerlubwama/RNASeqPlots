y <- as.matrix(c(0,10,20,30,40,50,60,70,80,90,100))
y
pred1 <- as.matrix(c(0,1,6,15,18,,24,26,33,37,42,49))
y <- as.matrix(c(0,10,20,30,40,50,60,70,80,90,100))
pred1 <- as.matrix(c(0,1,6,15,18,24,26,33,37,42,49))
pred2 <- as.matrix(c(1,-3,5,15,22,27,28,35,30,38,49))
pred3 <- as.matrix(c(0.00,1.58,1.82,1.97,2.09,2.18,2.26,2.33,2.40,2.45,2.51))
pred4 <- as.matrix(c(-5,48,194,443,798,1246,1799,2446,3196,4048,4995))
data = data.frame(pred1, pred2, pred3, pred4, y)
ggplot(data, aes(x=pred1, y=y)) + geom_point()
library(ggplot2)
ggplot(data, aes(x=pred1, y=y)) + geom_point()
ggplot(data, aes(x=pred1, y=y)) + geom_point() + geom_smooth(method=lm)
dev.off()
ggplot(data, aes(x=pred2, y=y)) + geom_point() + geom_smooth(method=lm)
dev.off()
ggplot(data, aes(x=pred3, y=y)) + geom_point() + geom_smooth(method=lm)
dev.off()
ggplot(data, aes(x=pred4, y=y)) + geom_point() + geom_smooth(method=lm)
dev.off()
lm.fit1 <- lm(y ~ pred1, data)
summary(lm.fit1)
lm.fit1 <- lm(y ~ pred2, data)
summary(lm.fit1)
lm.fit2 <- lm(y ~ pred2, data)
summary(lm.fit2)
lm.fit3 <- lm(y ~ pred3, data)
summary(lm.fit3)
lm.fit4 <- lm(y ~ pred4, data)
summary(lm.fit4)
lm.fit2 <- lm(y ~ pred2, data)
summary(lm.fit2)
lm.fit3 <- lm(y ~ pred3, data)
summary(lm.fit3)
lm.fit4 <- lm(y ~ pred4, data)
summary(lm.fit4)
lm.fit4 <- lm(y ~ pred4, data)
summary(lm.fit4)
lm.fit2 <- lm(y ~ pred2, data)
summary(lm.fit2)
pred5 <- as.matrix(c(0,0,0,1,1,0,1,1,0,1,1))
pred6 <- as.matrix(c(2,0,0,0,2,1,3,1,3,1,1))
data = data.frame(pred1, pred2, pred3, pred4, pred5, pred6, y)
lm.fit5 <- lm(y ~ pred5, data)
summary(lm.fit5)
lm.fit6 <- lm(y ~ pred6, data)
summary(lm.fit6)
y$pred5 <- as.factor(y$pred5)
y$pred5 <- as.factor(pred5)
View(y)
data$pred5 <- as.factor(data$pred5)
y <- as.matrix(c(0,10,20,30,40,50,60,70,80,90,100))
data$pred6 <- as.factor(data$pred6)
lm.fit5factor <- lm(y ~ pred5, data)
summary(lm.fit5factor)
lm.fit6factor <- lm(y ~ pred6, data)
summary(lm.fit6factor)
setwd("~/Documents/R/Dissertation")
# Scaling Methods  --------------------------------------------------------
#TMM normalisation (Using edgeR)
library(edgeR)
#Load data
x <- read.csv("data/processed/counts_timepoints_summed.csv", row.names="genes")
x
#delete last column (total gene counts)
x <- x[,-17]
head(x)
#comparing groups
group <- factor(c(“0hr”, ”0hr”, “1hr”, “1hr”, ‘6hr”, “6hr”, “12hr”, “12hr”,
“24hr”, “24hr”, “36hr”, “36hr”, “48hr”, “48hr”, “72hr”, “72hr”))
#comparing groups
group <- factor(c("0hr", "0hr", "1hr", "1hr", "6hr", "6hr", "12hr”, “12hr”,
“24hr”, “24hr”, “36hr”, “36hr”, “48hr”, “48hr”, “72hr”, “72hr”))
#comparing groups
group <- factor(c("0hr", "0hr", "1hr", "1hr", "6hr", "6hr", "12hr", "12hr",
"24hr", "24hr", "36hr", "36hr", "48hr", "48hr", "72hr", "72hr"))
#comparing groups
group <- factor(c("0hr", "0hr", "1hr", "1hr", "6hr", "6hr", "12hr", "12hr",
"24hr", "24hr", "36hr", "36hr", "48hr", "48hr", "72hr", "72hr"))
y <- DGEList(counts=x, group=group)
#normalise for library size by calculating scaling factor using TMM (default method)
y <- calcNormFactors(y)
#normalistion factors for each library
y$samples
# count per million read (normalised count)
norm_counts <- cpgm(y)
# count per million read (normalised count)
norm_counts <- cpm(y)
head(norm_counts)
y
# DESeq2 normalisation  ---------------------------------------------------
library(DESeq2)
#load data
x1 <- read.csv("data/processed/counts_timepoints_summed.csv", row.names="genes")
cond <- read.csv("data/processed/metadata_no_ids.csv", row.names="Timepoint")
cond <- read.csv("data/processed/metadata_no_ids.csv", row.names="Timepoint")
cond
cond$condition <- factor(cond$condition)
cond$Replicate <- factor(cond$Replicate)
# keep only required columsn present in the sample information table
x1 <- x1[, rownames(cond)]
#load data
x1 <- read.csv("data/processed/counts_timepoints_summed2.csv", row.names="genes")
cond <- read.csv("data/processed/metadata_no_ids.csv", row.names="Timepoint")
cond$Replicate <- factor(cond$Replicate)
# keep only required columsn present in the sample information table
x1 <- x1[, rownames(cond)]
# keep only required columsn present in the sample information table
x1 <- x1[, rownames(cond)]
rownames(cond)
x1
#load data
x1 <- read.csv("data/processed/counts_timepoints_summed2.csv", row.names="genes")
cond <- read.csv("data/processed/metadata_no_ids.csv", row.names="Timepoint")
x1
cond$Replicate <- factor(cond$Replicate)
rownames(cond)
# keep only required columsn present in the sample information table
x1 <- x1[, rownames(cond)]
head(x1)
#get dds
dds <- DESeqDataSetFromMatrix(countData = x1, colData = cond, design = ~ Replicate)
dds <- estimateSizeFactors(dds)
#DESeq2 normalisation counts
y2 = counts(dds, normalized = TRUE)
head(y2)
#get size factors
size(Factors(dds)
#get size factors
sizeFactors(dds)
#get size factors
sizeFactors(dds)
